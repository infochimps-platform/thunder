{"AWSTemplateFormatVersion":"2010-09-09","Description":"Creates an AWS VPC that contains a machine that acts as both an ipa master and a puppet master.","Parameters":{"KeyName":{"Type":"String","Description":"Name of an existing EC2 KeyPair to enable SSH access to the instances","Default":"cdra"},"InternalDomain":{"Type":"String","Description":"DNS domain to use for internal ip address registration.","Default":"platform.infochimps"},"EnrollerPassword":{"Type":"String","Description":"Password for the IPA machine enroller user.","Default":"qwerty7asdf","NoEcho":"True"},"EnrollerPrincipal":{"Type":"String","Description":"Principal name for the IPA machine enroller user.","Default":"cloud-enroller"},"PrivateAZ":{"Type":"String","Description":"Private Availability Zone","Default":"us-west-1c"},"PublicAZ":{"Type":"String","Description":"Public Availability Zone","Default":"us-west-1b"},"PublicSubnet":{"Type":"String","Description":"Public Subnet Id","Default":"subnet-9d0ee5f8"},"PrivateSubnet":{"Type":"String","Description":"Private Subnet Id","Default":"subnet-045e7442"},"VPC":{"Type":"String","Description":"VPC Id","Default":"vpc-1885627d"}},"Mappings":{"AWSRegionAMI":{"us-east-1":{"ami":"ami-f353449a"},"us-west-1":{"ami":"ami-68f2cc2d"},"us-west-2":{"ami":"ami-2ef39a1e"}}},"Resources":{"ambari1data":{"Properties":{"Size":100,"AvailabilityZone":{"Ref":"PrivateAZ"},"Tags":[{"Key":"Name","Value":"ambari1data"}]},"Type":"AWS::EC2::Volume"},"ambari1opt":{"Properties":{"Size":10,"AvailabilityZone":{"Ref":"PrivateAZ"},"Tags":[{"Key":"Name","Value":"ambari1opt"}]},"Type":"AWS::EC2::Volume"},"ambari1log":{"Properties":{"Size":10,"AvailabilityZone":{"Ref":"PrivateAZ"},"Tags":[{"Key":"Name","Value":"ambari1log"}]},"Type":"AWS::EC2::Volume"},"ambari1":{"Properties":{"InstanceType":"m3.medium","KeyName":{"Ref":"KeyName"},"ImageId":{"Fn::FindInMap":["AWSRegionAMI",{"Ref":"AWS::Region"},"ami"]},"NetworkInterfaces":[{"GroupSet":[{"Ref":"Ambari"}],"DeviceIndex":0,"DeleteOnTermination":true,"SubnetId":{"Ref":"PrivateSubnet"}}],"Volumes":[{"Device":"/dev/sdi","VolumeId":{"Ref":"ambari1data"}},{"Device":"/dev/sdj","VolumeId":{"Ref":"ambari1opt"}},{"Device":"/dev/sdk","VolumeId":{"Ref":"ambari1log"}}],"Tags":[{"Key":"Name","Value":"ambari1"}],"UserData":{"Fn::Base64":{"Fn::Join":["",["#cloud-config\noutput: {all: '| tee -a /var/log/cloud-init-output.log'}\nhostname: ",{"Fn::Join":[".",["ambari1",{"Ref":"InternalDomain"}]]},"\nbootcmd:\n - |\n  mkdir /opt\n  mkdir /data\n\n  for dev in /dev/xvdm /dev/xvdn /dev/xvdo; do\n    # Wait for devices to be attached.\n    while [ ! -e $dev ]; do echo waiting for $dev to be attached; sleep 1; done\n    # format drives if needed\n    blkid $dev\n    if [ $? != 0 ]; then mkfs.ext3 $dev; fi\n  done\n  \n  mkdir /var/log_old\n  mount --bind /var/log /var/log_old\n\nmount_default_fields: [ None, None, \"auto\", \"defaults,nobootwait\", \"0\", \"2\" ]\nmounts: \n - [ xvdm, /data, ext3, \"defaults,noatime\" ]\n - [ xvdn, /opt, ext3, \"defaults\" ]\n - [ xvdo, /var/log, ext3, \"defaults\" ]\nruncmd:\n - |\n  # Move existing logs to the new partition\n  cp -a /var/log_old/* /var/log\n  # Inform existing log processes that they need to let go of existing file descriptors and reopen\n  lsof | grep /var/log | grep -v cloud-init | cut -c 10-16 | xargs -l kill -HUP\n  rm -rf /var/log_old/*\n  umount /var/log_old\n\n  yum install -y ipa-client\n  ENROLLER_PASSWORD='",{"Ref":"EnrollerPassword"},"'\n  INTERNAL_DOMAIN='",{"Ref":"InternalDomain"},"'\n  #There is a bug in ipa for for enrolling hosts with minimal privs that causes us to have to try twice.\n  INSTALL_COUNT=0\n  while [ -z $IPA_INSTALLED ] && [ $INSTALL_COUNT -le 2 ]; do\n  INSTALL_COUNT=$((INSTALL_COUNT+1))\n  echo $ENROLLER_PASSWORD  | ipa-client-install --force-join --enable-dns-updates -p ",{"Ref":"EnrollerPrincipal"}," -W --mkhomedir --hostname ",{"Fn::Join":[".",["ambari1",{"Ref":"InternalDomain"}]]}," -U\n  if [ $? == 0 ]; then IPA_INSTALLED=true; fi\n  done\n  curl -k '",{"Fn::Join":["",["https://control.",{"Ref":"InternalDomain"},":8140/packages/current/install.bash"]]},"' | bash\n  service pe-puppet restart\n  cat << EOF > /etc/yum.repos.d/ambari.repo\n  [ambari-1.x]\n  name=Ambari 1.x\n  baseurl=http://public-repo-1.hortonworks.com/ambari/centos6/1.x/GA\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/ambari/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n\n  [HDP-UTILS-1.1.0.16]\n  name=Hortonworks Data Platform Utils Version - HDP-UTILS-1.1.0.16\n  baseurl=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.16/repos/centos6\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.16/repos/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n\n  [HDP-UTILS-1.1.0.17]\n  name=Hortonworks Data Platform Utils Version - HDP-UTILS-1.1.0.17\n  baseurl=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.17/repos/centos6\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.17/repos/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n\n  [Updates-ambari]\n  name=ambari - Updates\n  baseurl=http://public-repo-1.hortonworks.com/ambari/centos6/1.x/updates/1.6.0\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/ambari/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n  EOF\n  yum install -y epel-release ambari-agent ambari-server\n  sed -i.bak s/hostname=localhost/hostname=ambari1.",{"Ref":"InternalDomain"},"/ /etc/ambari-agent/conf/ambari-agent.ini\n"]]}}},"Type":"AWS::EC2::Instance"},"ambari2data":{"Properties":{"Size":100,"AvailabilityZone":{"Ref":"PrivateAZ"},"Tags":[{"Key":"Name","Value":"ambari2data"}]},"Type":"AWS::EC2::Volume"},"ambari2opt":{"Properties":{"Size":10,"AvailabilityZone":{"Ref":"PrivateAZ"},"Tags":[{"Key":"Name","Value":"ambari2opt"}]},"Type":"AWS::EC2::Volume"},"ambari2log":{"Properties":{"Size":10,"AvailabilityZone":{"Ref":"PrivateAZ"},"Tags":[{"Key":"Name","Value":"ambari2log"}]},"Type":"AWS::EC2::Volume"},"ambari2":{"Properties":{"InstanceType":"m3.medium","KeyName":{"Ref":"KeyName"},"ImageId":{"Fn::FindInMap":["AWSRegionAMI",{"Ref":"AWS::Region"},"ami"]},"NetworkInterfaces":[{"GroupSet":[{"Ref":"Ambari"}],"DeviceIndex":0,"DeleteOnTermination":true,"SubnetId":{"Ref":"PrivateSubnet"}}],"Volumes":[{"Device":"/dev/sdi","VolumeId":{"Ref":"ambari2data"}},{"Device":"/dev/sdj","VolumeId":{"Ref":"ambari2opt"}},{"Device":"/dev/sdk","VolumeId":{"Ref":"ambari2log"}}],"Tags":[{"Key":"Name","Value":"ambari2"}],"UserData":{"Fn::Base64":{"Fn::Join":["",["#cloud-config\noutput: {all: '| tee -a /var/log/cloud-init-output.log'}\nhostname: ",{"Fn::Join":[".",["ambari2",{"Ref":"InternalDomain"}]]},"\nbootcmd:\n - |\n  mkdir /opt\n  mkdir /data\n\n  for dev in /dev/xvdm /dev/xvdn /dev/xvdo; do\n    # Wait for devices to be attached.\n    while [ ! -e $dev ]; do echo waiting for $dev to be attached; sleep 1; done\n    # format drives if needed\n    blkid $dev\n    if [ $? != 0 ]; then mkfs.ext3 $dev; fi\n  done\n  \n  mkdir /var/log_old\n  mount --bind /var/log /var/log_old\n\nmount_default_fields: [ None, None, \"auto\", \"defaults,nobootwait\", \"0\", \"2\" ]\nmounts: \n - [ xvdm, /data, ext3, \"defaults,noatime\" ]\n - [ xvdn, /opt, ext3, \"defaults\" ]\n - [ xvdo, /var/log, ext3, \"defaults\" ]\nruncmd:\n - |\n  # Move existing logs to the new partition\n  cp -a /var/log_old/* /var/log\n  # Inform existing log processes that they need to let go of existing file descriptors and reopen\n  lsof | grep /var/log | grep -v cloud-init | cut -c 10-16 | xargs -l kill -HUP\n  rm -rf /var/log_old/*\n  umount /var/log_old\n\n  yum install -y ipa-client\n  ENROLLER_PASSWORD='",{"Ref":"EnrollerPassword"},"'\n  INTERNAL_DOMAIN='",{"Ref":"InternalDomain"},"'\n  #There is a bug in ipa for for enrolling hosts with minimal privs that causes us to have to try twice.\n  INSTALL_COUNT=0\n  while [ -z $IPA_INSTALLED ] && [ $INSTALL_COUNT -le 2 ]; do\n  INSTALL_COUNT=$((INSTALL_COUNT+1))\n  echo $ENROLLER_PASSWORD  | ipa-client-install --force-join --enable-dns-updates -p ",{"Ref":"EnrollerPrincipal"}," -W --mkhomedir --hostname ",{"Fn::Join":[".",["ambari2",{"Ref":"InternalDomain"}]]}," -U\n  if [ $? == 0 ]; then IPA_INSTALLED=true; fi\n  done\n  curl -k '",{"Fn::Join":["",["https://control.",{"Ref":"InternalDomain"},":8140/packages/current/install.bash"]]},"' | bash\n  service pe-puppet restart\n  cat << EOF > /etc/yum.repos.d/ambari.repo\n  [ambari-1.x]\n  name=Ambari 1.x\n  baseurl=http://public-repo-1.hortonworks.com/ambari/centos6/1.x/GA\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/ambari/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n\n  [HDP-UTILS-1.1.0.16]\n  name=Hortonworks Data Platform Utils Version - HDP-UTILS-1.1.0.16\n  baseurl=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.16/repos/centos6\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.16/repos/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n\n  [HDP-UTILS-1.1.0.17]\n  name=Hortonworks Data Platform Utils Version - HDP-UTILS-1.1.0.17\n  baseurl=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.17/repos/centos6\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.17/repos/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n\n  [Updates-ambari]\n  name=ambari - Updates\n  baseurl=http://public-repo-1.hortonworks.com/ambari/centos6/1.x/updates/1.6.0\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/ambari/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n  EOF\n  yum install -y epel-release ambari-agent ambari-server\n  sed -i.bak s/hostname=localhost/hostname=ambari1.",{"Ref":"InternalDomain"},"/ /etc/ambari-agent/conf/ambari-agent.ini\n"]]}}},"Type":"AWS::EC2::Instance"},"ambari3data":{"Properties":{"Size":100,"AvailabilityZone":{"Ref":"PrivateAZ"},"Tags":[{"Key":"Name","Value":"ambari3data"}]},"Type":"AWS::EC2::Volume"},"ambari3opt":{"Properties":{"Size":10,"AvailabilityZone":{"Ref":"PrivateAZ"},"Tags":[{"Key":"Name","Value":"ambari3opt"}]},"Type":"AWS::EC2::Volume"},"ambari3log":{"Properties":{"Size":10,"AvailabilityZone":{"Ref":"PrivateAZ"},"Tags":[{"Key":"Name","Value":"ambari3log"}]},"Type":"AWS::EC2::Volume"},"ambari3":{"Properties":{"InstanceType":"m3.medium","KeyName":{"Ref":"KeyName"},"ImageId":{"Fn::FindInMap":["AWSRegionAMI",{"Ref":"AWS::Region"},"ami"]},"NetworkInterfaces":[{"GroupSet":[{"Ref":"Ambari"}],"DeviceIndex":0,"DeleteOnTermination":true,"SubnetId":{"Ref":"PrivateSubnet"}}],"Volumes":[{"Device":"/dev/sdi","VolumeId":{"Ref":"ambari3data"}},{"Device":"/dev/sdj","VolumeId":{"Ref":"ambari3opt"}},{"Device":"/dev/sdk","VolumeId":{"Ref":"ambari3log"}}],"Tags":[{"Key":"Name","Value":"ambari3"}],"UserData":{"Fn::Base64":{"Fn::Join":["",["#cloud-config\noutput: {all: '| tee -a /var/log/cloud-init-output.log'}\nhostname: ",{"Fn::Join":[".",["ambari3",{"Ref":"InternalDomain"}]]},"\nbootcmd:\n - |\n  mkdir /opt\n  mkdir /data\n\n  for dev in /dev/xvdm /dev/xvdn /dev/xvdo; do\n    # Wait for devices to be attached.\n    while [ ! -e $dev ]; do echo waiting for $dev to be attached; sleep 1; done\n    # format drives if needed\n    blkid $dev\n    if [ $? != 0 ]; then mkfs.ext3 $dev; fi\n  done\n  \n  mkdir /var/log_old\n  mount --bind /var/log /var/log_old\n\nmount_default_fields: [ None, None, \"auto\", \"defaults,nobootwait\", \"0\", \"2\" ]\nmounts: \n - [ xvdm, /data, ext3, \"defaults,noatime\" ]\n - [ xvdn, /opt, ext3, \"defaults\" ]\n - [ xvdo, /var/log, ext3, \"defaults\" ]\nruncmd:\n - |\n  # Move existing logs to the new partition\n  cp -a /var/log_old/* /var/log\n  # Inform existing log processes that they need to let go of existing file descriptors and reopen\n  lsof | grep /var/log | grep -v cloud-init | cut -c 10-16 | xargs -l kill -HUP\n  rm -rf /var/log_old/*\n  umount /var/log_old\n\n  yum install -y ipa-client\n  ENROLLER_PASSWORD='",{"Ref":"EnrollerPassword"},"'\n  INTERNAL_DOMAIN='",{"Ref":"InternalDomain"},"'\n  #There is a bug in ipa for for enrolling hosts with minimal privs that causes us to have to try twice.\n  INSTALL_COUNT=0\n  while [ -z $IPA_INSTALLED ] && [ $INSTALL_COUNT -le 2 ]; do\n  INSTALL_COUNT=$((INSTALL_COUNT+1))\n  echo $ENROLLER_PASSWORD  | ipa-client-install --force-join --enable-dns-updates -p ",{"Ref":"EnrollerPrincipal"}," -W --mkhomedir --hostname ",{"Fn::Join":[".",["ambari3",{"Ref":"InternalDomain"}]]}," -U\n  if [ $? == 0 ]; then IPA_INSTALLED=true; fi\n  done\n  curl -k '",{"Fn::Join":["",["https://control.",{"Ref":"InternalDomain"},":8140/packages/current/install.bash"]]},"' | bash\n  service pe-puppet restart\n  cat << EOF > /etc/yum.repos.d/ambari.repo\n  [ambari-1.x]\n  name=Ambari 1.x\n  baseurl=http://public-repo-1.hortonworks.com/ambari/centos6/1.x/GA\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/ambari/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n\n  [HDP-UTILS-1.1.0.16]\n  name=Hortonworks Data Platform Utils Version - HDP-UTILS-1.1.0.16\n  baseurl=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.16/repos/centos6\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.16/repos/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n\n  [HDP-UTILS-1.1.0.17]\n  name=Hortonworks Data Platform Utils Version - HDP-UTILS-1.1.0.17\n  baseurl=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.17/repos/centos6\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.17/repos/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n\n  [Updates-ambari]\n  name=ambari - Updates\n  baseurl=http://public-repo-1.hortonworks.com/ambari/centos6/1.x/updates/1.6.0\n  gpgcheck=1\n  gpgkey=http://public-repo-1.hortonworks.com/ambari/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\n  enabled=1\n  priority=1\n  EOF\n  yum install -y epel-release ambari-agent ambari-server\n  sed -i.bak s/hostname=localhost/hostname=ambari1.",{"Ref":"InternalDomain"},"/ /etc/ambari-agent/conf/ambari-agent.ini\n"]]}}},"Type":"AWS::EC2::Instance"},"Ambari":{"Properties":{"GroupDescription":"Open Ambari cluster up to the internal network","VpcId":{"Ref":"VPC"},"SecurityGroupIngress":[{"IpProtocol":"tcp","FromPort":"0","ToPort":"65535","CidrIp":"10.0.0.0/16"},{"IpProtocol":"udp","FromPort":"0","ToPort":"65535","CidrIp":"10.0.0.0/16"},{"IpProtocol":"tcp","FromPort":"22","ToPort":"22","CidrIp":"0.0.0.0/0"}]},"Type":"AWS::EC2::SecurityGroup"}}}
